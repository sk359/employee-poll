import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { _getUsers } from '../_DATA';

const initialState = {
  authenticatedUser: null,
  status: 'idle',
  users: [], 
  redirectAfterLogin: null 
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(loadUsersFromFile())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadUsersFromFile = createAsyncThunk(
  'login/loadUsers',
  async () => {
    const usersObject = await _getUsers();
    const users = Object.values(usersObject);    
    // The value we return becomes the `fulfilled` action payload
    return users;    
  }
)

export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    login: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes      
      state.authenticatedUser = action.payload;
    },    
    logout: (state) => {     
      console.log("LOGOUT");       
      state.authenticatedUser = null;
    },
    loadUsers: (state, action) => {      
      state.users = action.payload;
    },
    setRedirectPath: (state, action) => {
      state.redirectAfterLogin = action.payload;
    }    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
  extraReducers: (builder) => {
    builder
      .addCase(loadUsersFromFile.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loadUsersFromFile.fulfilled, (state, action) => {
        state.status = 'idle';
        state.users = action.payload;
      });
  },
  
});

// export ActionCreators, return actions of type login/login and login/logout
// Used as arguments for dispatch (the return value of useDispatch)
export const { login, logout, loadUsers, setRedirectPath } = loginSlice.actions; 

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.login.authenticatedUser;
export const selectUserList = (state) => state.login.users;
export const selectRedirectPath = (state) => state.login.redirectAfterLogin;

export default loginSlice.reducer;
