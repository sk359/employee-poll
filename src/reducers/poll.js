import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { _getQuestions, _saveQuestion, _saveQuestionAnswer } from '../_DATA';



const initialState = {
  newPoll: null,
  user: null,
  status: 'idle',
  questions: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
/*
export const createPollAsync = createAsyncThunk(
  'poll/create',
  async (poll) => {
    const response = await createPoll(poll);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
*/

export const loadQuestionsAsync =  createAsyncThunk(
  'poll/load',
  async () => {
    const response = await _getQuestions();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const createQuestionsAsync =  createAsyncThunk(
  'poll/createQuestion',
  async (question) => {
    const response = await _saveQuestion(question);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const pollSlice = createSlice({
  name: 'poll',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    load: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      console.log("state.questions", action.payload);
      state.questions = Object.values(action.payload); // object => array
    },    
    create: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      console.log("poll reducer", action.payload);
      state.authenticatedUser = action.payload;
    },    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
  extraReducers: (builder) => {
    builder
      .addCase(loadQuestionsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loadQuestionsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.questions = action.payload;
      })
      .addCase(createQuestionsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createQuestionsAsync.fulfilled, (state, action) => {
        console.log("create", action);
        state.status = 'idle';
        state.questions = [..._getQuestions.state.questions, action.payload];
        state.newPoll = action.payload
      });
  },
  
});

// export ActionCreators, return actions of type login/login and login/logout
// Used as arguments for dispatch (the return value of useDispatch)
export const { load, create } = pollSlice.actions; 

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const questionsSelector = (state) => state.poll.questions;

export default pollSlice.reducer;
